---
title: "데이터 전처리 : 파이썬"
description: "데이터 전처리 (Preprocessing)를 구성하는 기계학습과 시각화를 위한 다양한 데이터 정제(Cleansing)하는 방법을 다룹니다."
date: today # 날짜 설정: now, last-modified
author:
  - name: 이광춘
    affiliation: TCS
title-block-banner: false
format:
  html:
    theme: 
      - flatly
      - css/quarto-fonts.css
    code-fold: false
    code-overflow: scroll
    toc: true
    toc-depth: 3
    number-sections: true
    highlight-style: github    
    self-contained: false
editor_options: 
  chunk_output_type: console
knitr:
  opts_chunk: 
    collapse: true
    comment: "#>" 
    R.options:
      knitr.graphics.auto_pdf: true  
---



# 데이터셋

[palmerpenguins](https://github.com/mcnakhaee/palmerpenguins) 데이터셋을 파이썬 데이터 패키지로 구현되어 있어 이를 설치하여 불러 실습에 사용한다.

````bash
$ pip3 install palmerpenguins
````



# 결측값 제거

[참고자료: [결측데이터](https://aispiration.com/data-science/ds-missing.html)]{.aside}

:::{layout-ncol="2"}

```{python}
#| eval: false

import numpy as np
import pandas as pd
from palmerpenguins import load_penguins

penguins
```

```{python}
#| echo: false

import numpy as np
import pandas as pd
from palmerpenguins import load_penguins

penguins = load_penguins()
penguins.head()

```
:::

## 행기준 제거

:::{layout-ncol="2"}

```{python}
#| eval: false

penguins \
  .dropna()
```

```{python}
#| echo: false

penguins \
  .dropna()
```

:::


## 열기준 제거

:::{layout-ncol="2"}

```{python}
#| eval: false

penguins \
  .dropna(axis = 1)
```

```{python}
#| echo: false

penguins \
  .dropna(axis = 1)
```

:::



## 결측값 현황

:::{layout-ncol="2"}

```{python}
#| eval: false

nan_sum = penguins.isna().sum()

type(nan_sum)

nan_df = nan_sum.to_frame(name = "결측값")

# nan_df = pd.DataFrame(nan_sum).rename(columns = {0:'결측값'})


penguins_nrow = penguins.shape[0]

nan_df \
 .assign(결측비율 = nan_df['결측값'] / penguins_nrow)
```

```{python}
#| echo: false

nan_sum = penguins.isna().sum()

type(nan_sum)

nan_df = nan_sum.to_frame(name = "결측값")

# nan_df = pd.DataFrame(nan_sum).rename(columns = {0:'결측값'})


penguins_nrow = penguins.shape[0]

nan_df.assign()

nan_df \
 .assign(결측비율 = nan_df['결측값'] / penguins_nrow)
```

:::


# 중복 제거

## 행기준 제거

:::{layout-ncol="2"}

```{python}
#| eval: false

penguins_dup = penguins \
  .loc[:, ["species", "island", "bill_length_mm", "bill_depth_mm"]] 

penguins_dup_mask = penguins_dup \
  .duplicated(keep = "first")

penguins_dup[penguins_dup_mask]

penguins [(penguins['species'] == "Adelie") &
          (penguins['island']  == "Biscoe") &
          (penguins['bill_length_mm']  == 35.0) &
          (penguins['bill_depth_mm']  == 17.9)]
```

```{python}
#| echo: false

penguins_dup = penguins \
  .loc[:, ["species", "island", "bill_length_mm", "bill_depth_mm"]] 

penguins_dup_mask = penguins_dup \
  .duplicated(keep = "first")

penguins_dup[penguins_dup_mask]

penguins [(penguins['species'] == "Adelie") &
          (penguins['island']  == "Biscoe") &
          (penguins['bill_length_mm']  == 35.0) &
          (penguins['bill_depth_mm']  == 17.9)]

```
:::


## 열기준 제거

:::{layout-ncol="2"}

```{python}
#| eval: false

penguins_dup_df = pd.concat([penguins[['species', 'island']], penguins['species']], axis=1)

penguins_dup_df.columns.duplicated()

penguins_dup_df.loc[:,~penguins_dup_df.columns.duplicated()]
```

```{python}
#| echo: false

penguins_dup_df = pd.concat([penguins[['species', 'island']], penguins['species']], axis=1)

penguins_dup_df.columns.duplicated()

penguins_dup_df.loc[:,~penguins_dup_df.columns.duplicated()]

```
:::


# 자료형 변환

:::{layout-ncol="2"}

```{python}
#| eval: false

penguins['year'] = pd.to_datetime(penguins['year'], format='%Y')

penguins \
  .loc[:, ["species", "year", "island", "bill_length_mm"]]
```

```{python}
#| echo: false

penguins['year'] = pd.to_datetime(penguins['year'], format='%Y')

penguins \
  .loc[:, ["species", "year", "island", "bill_length_mm"]]

```

:::


# 이상점 제거


:::{layout-ncol="2"}

```{python}
#| eval: false

bill_mean = penguins["bill_length_mm"].mean()
bill_sd = penguins["bill_length_mm"].std()  

penguins \
  .loc[(penguins["bill_length_mm"] < bill_mean - 2 * bill_sd) | \
       (penguins["bill_length_mm"] > bill_mean + 2 * bill_sd), :]

```

```{python}
#| echo: false

bill_mean = penguins["bill_length_mm"].mean()
bill_sd = penguins["bill_length_mm"].std()  

penguins \
  .loc[(penguins["bill_length_mm"] < bill_mean - 2 * bill_sd) | \
       (penguins["bill_length_mm"] > bill_mean + 2 * bill_sd), :]

```

:::

# 공백문자제거

:::{layout-ncol="2"}

```{python}
#| eval: false

penguins \
  .assign(species=lambda x: x["species"].str.strip())

```

```{python}
#| echo: false

penguins \
  .assign(species=lambda x: x["species"].str.strip())

```

:::

:::{.callout-note}
### `strip()` 메쏘드

```{python}
text = ' _ 대한민국 화이팅!!! _ '
print('[' + text.rstrip() + ']')
print('[' + text.lstrip() + ']')
print('[' + text.strip() + ']')
```

:::


# 칼럼 변환

:::{layout-ncol="2"}

```{python}
#| eval: false

def toupper(x):
    return x.str.upper()

penguins \
  .apply(lambda x: toupper(x) if x.dtype == "object" else x)
```

```{python}
#| echo: false

def toupper(x):
    return x.str.upper()

penguins \
  .apply(lambda x: toupper(x) if x.dtype == "object" else x)
```

:::


# 특정문자 변환


:::{layout-ncol="2"}

```{python}
#| eval: false

penguins \
  .assign(species_kr = lambda x: x["species"] + "_종") \
  .loc[:, ["species", "species_kr", "island"]]
```

```{python}
#| echo: false

penguins \
  .assign(species_kr = lambda x: x["species"] + "_종") \
  .loc[:, ["species", "species_kr", "island"]]
```

:::


# 결측값 치환


:::{layout-ncol="2"}

```{python}
#| eval: false

mean_bill_length = penguins["bill_length_mm"].mean()

penguins \
  .assign(bill_length_mm = lambda x: x["bill_length_mm"].fillna(mean_bill_length))
```

```{python}
#| echo: false

mean_bill_length = penguins["bill_length_mm"].mean()

penguins \
  .assign(bill_length_mm = lambda x: x["bill_length_mm"].fillna(mean_bill_length))
```

:::


# Pivoting

폭넓은 데이터(wide-format data)를 긴 데이터(long-format data)로 혹은 반대로 데이터의 형태를 바꾼다.

## Wide &rarr; Long

:::{layout-ncol="2"}

```{python}
#| eval: false

penguins_long = pd.melt(penguins, id_vars=["species"], 
                        value_vars = penguins.columns[penguins.columns.str.contains("mm")], 
                        var_name   = "측정변수", 
                        value_name = "측정값")

penguins_long
```

```{python}
#| echo: false

penguins_long = pd.melt(penguins, id_vars=["species"], 
                        value_vars = penguins.columns[penguins.columns.str.contains("mm")], 
                        var_name   = "측정변수", 
                        value_name = "측정값")

penguins_long
```

:::


## long &rarr; Wide

:::{layout-ncol="2"}

```{python}
#| eval: false

penguins_long.reset_index().pivot_table(index   = "species", 
                    columns = "측정변수", 
                    values  = "측정값",
                    aggfunc = 'mean')
```

```{python}
#| echo: false

penguins_long.reset_index().pivot_table(index   = "species", 
                    columns = "측정변수", 
                    values  = "측정값",
                    aggfunc = 'mean')
```

:::


# 변수 쪼개기

:::{layout-ncol="2"}

```{python}
#| eval: false

extracted = penguins_long["측정변수"].str.extract(r"([a-z]+?)_([a-z]+?)_(mm)", expand=True)
extracted.columns = ["부위", "측정", "단위"]

penguins_long.assign(**extracted)
```

```{python}
#| echo: false

extracted = penguins_long["측정변수"].str.extract(r"([a-z]+?)_([a-z]+?)_(mm)", expand=True)
extracted.columns = ["부위", "측정", "단위"]

penguins_long.assign(**extracted)

```

:::


