---
title: "펭균 ML 보고서"
description: "펭귄 암수예측 기계학습모형 개발 보고서"
date: today # 날짜 설정: now, last-modified
author:
  - name: 이광춘
    affiliation: TCS
title-block-banner: false
format:
  html:
    theme: 
      - flatly
      - css/quarto-fonts.css
    code-fold: true
    code-overflow: scroll
    toc: true
    toc-depth: 3
    number-sections: true
    highlight-style: github    
    self-contained: false
editor_options: 
  chunk_output_type: console
knitr:
  opts_chunk: 
    collapse: true
    comment: "#>" 
    R.options:
      knitr.graphics.auto_pdf: true  
filters:
   - lightbox
lightbox: auto      
---


# 들어가며

파머 펭귄 성별 분류 머신러닝 모델은 인구 관리 및 모니터링을 더 효율적으로 할 수 있기 때문에 중요합니다. 개별 펭귄의 성별을 정확하게 식별함으로써 펭귄 서식지에서 성비와 산란 패턴을 더 잘 이해하고 추적 할 수 있습니다. 이러한 정보는 지구온난화로 인한 기후위기 시대 펭귄생존을 보장하는 데 필수적입니다. 또한 성별 분류 모델은 노동집약적인 성별 식별 업무를 대폭 줄여 시간과 자원을 절약을 효율적으로 사용할 수 있도록 기여합니다.

# 데이터

## 데이터 입수

펭귄 데이터를 입수할 수 있는 방법은 크게 3가지가 있습니다.

- 데이터 패키지
- 로컬 csv 파일
- 클라우드 저장소: Microsoft Azure Blob Storage, Google Cloud Storage, DigitalOcean Spaces, Backblaze B2, Wasabi Hot Cloud Storage, Alibaba Cloud OSS, IBM Cloud Object Storage, Oracle Cloud Infrastructure Object Storage, OpenStack Object Storage (Swift), Rackspace Cloud Files

### 데이터 패키지

:::{.panel-tabset}

```bash
> install.packages('palmerpenguins')
```

#### R - `palmerpenguins`

```{r}
library(palmerpenguins)

penguins <- palmerpenguins::penguins

penguins
```

#### Python - `palmerpenguins`

```bash
$ pip install palmerpenguins
```


```{python}
import pandas as pd
from palmerpenguins import load_penguins 

penguins = load_penguins()

penguins.head()
```

:::


### csv 데이터

:::{.panel-tabset}

#### R - `csv`

```{r}
library(tidyverse)

penguins_csv <- read_csv('data/penguins.csv')

penguins_csv
```


#### Python - `csv`

```{python}
import pandas as pd

palmer_df = pd.read_csv('data/penguins.csv')

print(palmer_df.head())

```

:::

### 클라우드 저장소

:::{.panel-tabset}

#### Onedrive

```{r}
library(pins)
library(Microsoft365R)

od <- Microsoft365R::get_personal_onedrive()
board <- board_ms365(od, "krvote_board")
# board %>% pin_write(penguins)

board %>% pin_read("penguins")
```

#### AWS S3

#### Google Cloud Storage 

:::

# 데이터 전처리

펭귄 데이터는 교육용으로 제공되지만 다른 데이터셋과 달리 결측값(`NA`)도 포함되어 있어 
본격적인 분석을 위해서 결측값 현황을 정확히 확인하고 결측값에 대한 적절한 전략을 세우고 이를 처리해야 한다.

## 결측값 현황

데이터프레임에 결측값이 어떻게 분포되어 있는지 먼저 시각적으로 파악하자.
상당수 결측값이 `sex` 칼럼에 몰려있는 것이 확인된다.
특히, 일부 펭귄의 경우 측정 변수가 모두 결측된 현황도 파악할 수 있다.


:::{.panel-tabset}

### 전체 현황

```{r}
library(tidyverse)
library(naniar)
library(palmerpenguins)

penguins_raw <- palmerpenguins::penguins

vis_miss(penguins_raw)

```


### 결측값 모아보기

```{r}
vis_miss(penguins_raw, cluster = TRUE, sort_miss = TRUE)
```

:::

시각적으로 확인한 후에 기술통계량을 통해 정확한 결측값 현황을 확인해보자.

:::{.panel-tabset}

### 전체 값 수

```{r}
nrow(penguins_raw) * ncol(penguins_raw)
```


### 결측값 수

```{r}
naniar::n_miss(penguins_raw)
```

### 완전한 값의 수

```{r}
naniar::n_complete(penguins_raw)
```

### 변수별 결측값

```{r}
miss_var_summary(penguins_raw)
```


### 관측점별 결측값

```{r}
miss_case_summary(penguins_raw)
```

:::


## 결측값 처리 전략

결측값 현황을 살펴보고 결측값이 많은 4번, 272번 펭귄은 분석에서 제거하고 `sex` 암수변수는 범주형 변수라 평균과 유사한 기능을 하는 최빈값(Mode) 정보를 이용하여 결측값을 채워넣는 것으로 한다.


```{r}

# get_mode <- function(x) {
#   ux <- unique(x)
#   ux[which.max(tabulate(match(x, ux)))]
# }
# 
# get_mode(penguins_csv$sex)

penguins_tbl <- penguins_raw %>% 
  filter( !row_number() %in% c(4, 272) ) %>% 
  mutate( sex = as.character(sex)) %>% 
  mutate( sex = if_else(is.na(sex), "male", sex)) %>% 
  mutate( sex = factor( sex, levels = c("female", "male")))


```

# 탐색적 데이터 분석

결측값 제거 등을 통해 데이터 전처리 작업이 완료되었다.
다음 단계로 탐색적 데이터 분석을 통해 암수성별과 관련된 정보를 탐색적으로 파악해보자.

## 기술통계량

```{r}
library(explore)

penguins_tbl %>% 
  describe()
```


## 단변량분석

```{r}
penguins_tbl %>% 
  explore_all()
```

## 암수(target) 연관성

```{r}
penguins_tbl %>% 
  explore_all(target = sex)
```

## 암수(target) 의사결정나무

```{r}
penguins_tbl %>% 
  explain_tree(target = sex)
```

## 시각화

```{r}
penguins_tbl %>% 
  explore(body_mass_g, bill_length_mm, target = sex)
```

```{r}
library(tidymodels)
library(parttree)

penguins_dt <- 
  decision_tree() %>%
  set_engine("rpart") %>%
  set_mode("classification") %>%
  fit(sex ~ body_mass_g + bill_length_mm, data = penguins_tbl)

# 시각화
penguins_tbl %>%
  ggplot(aes(x = body_mass_g, y = bill_length_mm)) +
  # geom_jitter(aes(col=species), alpha=0.7) +
  geom_point(aes(color = sex)) +
  geom_parttree(data = penguins_dt, aes(fill=sex), alpha = 0.1,
                flipaxes = FALSE) +
  scale_color_manual(values = c("female"  = "blue",
                              "male" = "red")) +
  scale_fill_manual(values = c("female"  = "blue",
                              "male" = "red")) +  
  theme_minimal()
```


# 암수 분류 모형

## 훈련/시험 데이터셋

7:3으로 훈련시험 데이터셋을 나눈다.

```{r}
library(tidymodels)

set.seed(123)
penguin_split <- initial_split(penguins_tbl, strata = sex, prop = 0.7)
penguin_train <- training(penguin_split)
penguin_test <- testing(penguin_split)

set.seed(123)
penguin_boot <- bootstraps(penguin_train)
penguin_boot
```

## Feature Engineering

숫자형 변수에 대해서 정규화 작업을 진행하고 범주형 변수에 대해서 One-Hot 인코딩 작업을 수행하여 Feature 로 추가시킨다.

```{r}
penguin_rec <- recipe(sex ~ ., data = penguin_train) %>%
  step_corr(all_numeric(), threshold = 0.9) %>% 
  step_normalize(all_numeric()) %>% 
  step_dummy(all_nominal(), -all_outcomes(), one_hot = TRUE)

penguin_rec
```

## 기본모형(RF)

```{r}
rf_spec <- rand_forest() %>%
  set_mode("classification") %>% 
  set_engine("ranger") 

rf_spec
```

## 작업흐름

```{r}
penguin_wf <- workflow() %>%
  add_recipe(penguin_rec) %>% 
  add_model(rf_spec)

penguin_wf
```


## 병렬처리 설정

```{r}
library(doParallel)

cores <- parallel::detectCores(logical = FALSE)
cl <- makePSOCKcluster(cores)
registerDoParallel(cores = cl)

set.seed(77)
```


## 훈련 적합

```{r}
tictoc::tic()

rf_rs <- penguin_wf %>%
  fit_resamples(
    resamples = penguin_boot,
    control = control_resamples(save_pred = TRUE)
  )

rf_rs

tictoc::toc()
```

## 모델 평가

```{r}
collect_metrics(rf_rs)
```

### 오차 행렬

```{r}
rf_rs %>% 
  conf_mat_resampled() %>% 
  pivot_wider(names_from = Truth, values_from = Freq)
```

### ROC 곡선

```{r}
rf_rs %>% 
  collect_predictions() %>%
  group_by(id) %>%
  roc_curve(sex, .pred_female) %>%
  ggplot(aes(1 - specificity, sensitivity, color = id)) +
  geom_abline(lty = 2, color = "gray80", size = 1.5) +
  geom_path(show.legend = FALSE, alpha = 0.6, size = 1.2) +
  coord_equal()
```

##  최종 모형

```{r}
penguin_final <- penguin_wf %>%
  last_fit(penguin_split)

penguin_final
```

## 모형 성능

```{r}
model_perf <- collect_metrics(penguin_final)
```

암수 성별 예측모형의 최종 모형 정확도는 `r model_perf %>% filter(.metric == "accuracy") %>% pull(.estimate)` 이고  ROC 는 `r model_perf %>% filter(.metric == "roc_auc") %>% pull(.estimate)` 이다.

```{r}
collect_predictions(penguin_final) %>%
  conf_mat(sex, .pred_class)
```

실제 암컷 펭귄을 수컷 펭귄으로 오분류하는 것이 그 반의 경우보다 30% 정도 더 높게 나온다.

# 설명가능한 ML

[`DALEX`](https://ema.drwhy.ai/) 패키지 도구를 사용하여 기계확습모형을 꼼꼼히 살펴본다.

```{r}
#| eval: false

library(DALEX)
library(DALEXtra) 
library(modelStudio) # install_dependencies()

penguin_fit <- penguin_wf %>%
  fit(data = penguin_train)

y_penguin <- as.numeric(penguin_train$sex)

penguin_explainer <- explain_tidymodels(penguin_fit,
                     data = penguin_train,
                     y = y_penguin,
                     label = "Penguin RF")

set.seed(123)
new_penguins <- penguin_train %>% slice_sample(n = 3)

modelStudio(penguin_explainer, new_observation = new_penguins)

```



```{=html}
<iframe width="1200" height="1000" src="modelStudio/index.html" title="Quarto Documentation"></iframe>
```


# 주요 기여사항

파머 펭귄 성별 분류 머신러닝 모델은 인구 관리 및 모니터링을 더 효율적으로 할 수 있는 예측 분류 모형을 개발하였다. 예측 모형의 정확도는 `r model_perf %>% filter(.metric == "accuracy") %>% pull(.estimate)` 으로 기존 통계모형보다 우수한 정확도를 보이고 있다. 


# 한계

예측 모형의 정확도가 `r model_perf %>% filter(.metric == "accuracy") %>% pull(.estimate)` 으로 기존 통계모형보다 높지만 실제 업무에 배포하여 적용하는 기준 정확도 **95%**에는 미치지 못하는 한계가 있고, 개발된 암수분류 모형을 실제 운영환경에서 사용할 수 있는 추가 작업이 필요한 것으로 확인되었습니다.


# 결론

개별 펭귄의 성별을 정확하게 식별함으로써 펭귄 서식지에서 성비와 산란 패턴을 더 잘 이해하고 추적 할수 있는 성별 예측 기계학습 모형을 개발하였고 이를 실제 업무에 적용하기 위한 도전과제도 추가로 발굴되었다. 금번 프로젝트가 후속 연구개발로 이어져 기후 온난화로 인한 안정적인 펭귄 개체수 유지를 위한 발판으로 이어질 것으로 기대된다.


