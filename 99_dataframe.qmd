---
title: "데이터프레임"
description: "데이터과학 자료구조 데이터프레임(DataFrame)을 학습합니다."
date: today # 날짜 설정: now, last-modified
author:
  - name: 이광춘
    affiliation: TCS
title-block-banner: false
format:
  html:
    theme: 
      - flatly
      - css/quarto-fonts.css
    code-fold: false
    code-overflow: scroll
    toc: true
    toc-depth: 3
    number-sections: true
    highlight-style: github    
    self-contained: false
editor_options: 
  chunk_output_type: console
knitr:
  opts_chunk: 
    collapse: true
    comment: "#>" 
    R.options:
      knitr.graphics.auto_pdf: true  
filters:
   - lightbox
lightbox: auto      
---



# 데이터프레임

- 데이터 과학 자료구조 [데이터프레임](https://aispiration.com/data-science/ds-data-structure.html)

![](fig/dataframe_pandas.jpg)

# 내부 데이터

## list of lists

:::{layout-ncol="2"}

```{python}
#| eval: false
import pandas as pd
import numpy as np

# list of lists 생성
data = [['Alex', 10], ['Bob', 12], ['Clarke', 13]]

# 데이터프레임
df = pd.DataFrame(data, columns=['Name', 'Age'])

df
```

```{python}
#| echo: false
import pandas as pd
import numpy as np

# list of lists 생성
data = [['Alex', 10], ['Bob', 12], ['Clarke', 13]]

# 데이터프레임
df = pd.DataFrame(data, columns=['Name', 'Age'])

df
```

:::


## dictionary of lists

:::{layout-ncol="2"}

```{python}
#| eval: false

# dictionary of lists 생성
data = {'Name': ['Tom', 'Jack', 'Steve', 'Ricky'], 'Age': [28,34,29,42]}

# Create a DataFrame
df = pd.DataFrame(data)

df
```

```{python}
#| echo: false

# dictionary of lists 생성
data = {'Name': ['Tom', 'Jack', 'Steve', 'Ricky'], 'Age': [28,34,29,42]}

# Create a DataFrame
df = pd.DataFrame(data)

df
```

:::


## list of dictionaries

:::{layout-ncol="2"}

```{python}
#| eval: false

# list of dictionaries 생성
data = [{'a': 1, 'b': 2}, {'a': 5, 'b': 10, 'c': 20}]

df = pd.DataFrame(data)

print(df)
```

```{python}
#| echo: false

# list of dictionaries 생성
data = [{'a': 1, 'b': 2}, {'a': 5, 'b': 10, 'c': 20}]

df = pd.DataFrame(data)

print(df)
```

:::


## list of dictionaries with data types

:::{layout-ncol="2"}

```{python}
#| eval: false

# list of dictionary 생성
book = [{'id':1,'name':'python','price':56,'no_of_pages':34},
        {'id':2,'name':'Node-js','price':45,'no_of_pages':54},
        {'id':3,'name':'R','price':100,'no_of_pages':80},
        {'id':4,'name':'Html','price':16,'no_of_pages':20}]

# 컬럼에 대한 자료형 지정

dtypes = {'id': int, 'name': str, 'price': float, 'no_of_pages': int}

# df = pd.DataFrame(book, dtype = {'id': int, 'name': str, 'price': float, 'no_of_pages': int})
# df = pd.DataFrame(book, dtype = [('id', int), ('name', str), ('price', float), ('no_of_pages', int)])
df = pd.DataFrame.from_dict(book, orient='columns').astype(dtypes)

print(df)
```

```{python}
#| echo: false

# list of dictionary 생성
book = [{'id':1,'name':'python','price':56,'no_of_pages':34},
        {'id':2,'name':'Node-js','price':45,'no_of_pages':54},
        {'id':3,'name':'R','price':100,'no_of_pages':80},
        {'id':4,'name':'Html','price':16,'no_of_pages':20}]

# 컬럼에 대한 자료형 지정

dtypes = {'id': int, 'name': str, 'price': float, 'no_of_pages': int}

# df = pd.DataFrame(book, dtype = {'id': int, 'name': str, 'price': float, 'no_of_pages': int})
# df = pd.DataFrame(book, dtype = [('id', int), ('name', str), ('price', float), ('no_of_pages', int)])
df = pd.DataFrame.from_dict(book, orient='columns').astype(dtypes)

print(df)
```

:::

## NumPy array

:::{layout-ncol="2"}

```{python}
#| eval: false

# Numpy Arrary 생성
data = np.array([[1, 2], [3, 4]])

df = pd.DataFrame(data, columns=['a', 'b'])

print(df)
```

```{python}
#| echo: false

# Numpy Arrary 생성
data = np.array([[1, 2], [3, 4]])

df = pd.DataFrame(data, columns=['a', 'b'])

print(df)
```

:::


## NumPy structured array

:::{layout-ncol="2"}

```{python}
#| eval: false

# NumPy structured array 생성
data = np.array([(1, 'Alice', 22), (2, 'Bob', 35)], dtype=[('ID', 'i4'), ('Name', 'U10'), ('Age', 'i4')])

df = pd.DataFrame(data)

print(df)
```

```{python}
#| echo: false

# NumPy structured array 생성
data = np.array([(1, 'Alice', 22), (2, 'Bob', 35)], dtype=[('ID', 'i4'), ('Name', 'U10'), ('Age', 'i4')])

df = pd.DataFrame(data)

print(df)
```

:::

## Pandas Series

:::{layout-ncol="2"}

```{python}
#| eval: false

# Pandas Series 생성
ps = pd.Series([1, 3, 5, np.nan, 6, 8])

df = pd.DataFrame(ps, columns=['Number'])

print(df)
```

```{python}
#| echo: false

# Pandas Series 생성
ps = pd.Series([1, 3, 5, np.nan, 6, 8])

df = pd.DataFrame(ps, columns=['Number'])

print(df)
```

:::

## dictionary of Series

:::{layout-ncol="2"}

```{python}
#| eval: false

# Pandas Series 생성
s1 = pd.Series([1, 3, 5, np.nan, 6, 8])
s2 = pd.Series([4, 7, 5, 2, 3, 6])

# dictionary of Series 생성
data = {'First': s1, 'Second': s2}

df = pd.DataFrame(data)

print(df)
```

```{python}
#| echo: false

# Pandas Series 생성
s1 = pd.Series([1, 3, 5, np.nan, 6, 8])
s2 = pd.Series([4, 7, 5, 2, 3, 6])

# dictionary of Series 생성
data = {'First': s1, 'Second': s2}

df = pd.DataFrame(data)

print(df)
```

:::

## ~~pandas Panel~~

`Panel has been deprecated in the 0.20.x release and completely removed from 0.25`

:::{layout-ncol="2"}

```{python}
#| eval: false

# pandas Panel 생성
p = pd.Panel({'Item1': pd.DataFrame(np.random.randn(4, 3)), 
              'Item2': pd.DataFrame(np.random.randn(4, 2))})

df = pd.DataFrame(p)

print(df)
```

```{python}
#| eval: false

# pandas Panel 생성
data = {'Item1': pd.DataFrame(np.random.randn(4, 3)), 
        'Item2': pd.DataFrame(np.random.randn(4, 2))}

df = pd.Panel(data)


print(df)
```

:::

## list of tuples

:::{layout-ncol="2"}

```{python}
#| eval: false

# list of tuple 생성
data = [('Alex', 10), ('Bob', 12), ('Clarke', 13)]

df = pd.DataFrame(data, columns=['Name', 'Age'])

print(df)
```

```{python}
#| echo: false

# list of tuple 생성
data = [('Alex', 10), ('Bob', 12), ('Clarke', 13)]

df = pd.DataFrame(data, columns=['Name', 'Age'])

print(df)
```

:::





# 외부 데이터

## `.csv` 파일

:::{layout-ncol="2"}

```{python}
#| eval: false
import pandas as pd
import numpy as np

df = pd.read_csv('https://raw.githubusercontent.com/datasets/population/master/data/population.csv')
print(df)
```

```{python}
#| echo: false
import pandas as pd
import numpy as np

df = pd.read_csv('https://raw.githubusercontent.com/datasets/population/master/data/population.csv')
print(df)
```

:::


## `.json` 파일

:::{layout-ncol="2"}

```{python}
#| eval: false

df = pd.read_json('https://raw.githubusercontent.com/sparkbyexamples/python-pandas-examples/main/data-files/courses_data.json')
print(df)
```

```{python}
#| echo: false

df = pd.read_json('https://raw.githubusercontent.com/sparkbyexamples/python-pandas-examples/main/data-files/courses_data.json')
print(df)
```

:::

## `.xlsx` 파일

[openpyxl 설치: `pip3 install openpyxl`]{.aside}

:::{layout-ncol="2"}

```{python}
#| eval: false

from pandas import ExcelFile

df = pd.read_excel('https://github.com/buchs-kevin/Pandas-Excel-Example/raw/master/Pandas-Example.xlsx')
print(df)
```

```{python}
#| echo: false

from pandas import ExcelFile

df = pd.read_excel('https://github.com/buchs-kevin/Pandas-Excel-Example/raw/master/Pandas-Example.xlsx')
print(df)
```

:::


## `SQLite` DB 파일


:::{layout-ncol="2"}

```{python}
#| eval: false

import sqlite3

conn = sqlite3.connect('data/portal_mammals.sqlite')
df = pd.read_sql_query('SELECT * FROM species;', conn)
print(df)
```

```{python}
#| echo: false

import sqlite3

conn = sqlite3.connect('data/portal_mammals.sqlite')
df = pd.read_sql_query('SELECT * FROM species;', conn)
print(df)
```

:::


## `html` 파일

[lxml 설치 : `pip3 install lxml`]{.aside}

[위키백과 Minnesota](https://en.wikipedia.org/wiki/Minnesota) 웹사이트에서 "United States presidential election results for Minnesota" 선거결과 표 가져온다.

:::{layout-ncol="2"}

```{python}
#| eval: false

df = pd.read_html('https://en.wikipedia.org/wiki/Minnesota', 
                  match='United States presidential election results for Minnesota')[0]
print(df)
```

```{python}
#| echo: false

df = pd.read_html('https://en.wikipedia.org/wiki/Minnesota', 
                  match='United States presidential election results for Minnesota')[0]
print(df)
```

:::

