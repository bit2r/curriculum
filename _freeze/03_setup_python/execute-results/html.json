{
  "hash": "8d80dee3f80ae66be28c1316a7b37c2c",
  "result": {
    "markdown": "---\ntitle: \"파이썬 환경설정\"\ndescription: \"데이터 과학 파이썬 프로그램 개발 환경을 준비합니다.\"\ndate: today # 날짜 설정: now, last-modified\nauthor:\n  - name: 이광춘\n    affiliation: TCS\ntitle-block-banner: false\nformat:\n  html:\n    css: css/quarto-fonts.css\n    code-fold: false\n    toc: true\n    toc-depth: 2\n    number-sections: true\n    highlight-style: github    \n    self-contained: false\nbibliography: bibliography.bib\nlink-citations: yes\ncsl: apa-single-spaced.csl\nengine: knitr\neditor_options: \n  chunk_output_type: console\nfilters:\n  - lightbox\nlightbox: auto  \neditor: \n  markdown: \n    wrap: 72\n---\n\n\n\n# 파이썬 환경구축\n\n[참조: [Riddhiman (Apr 19, 2022), \"Getting started with Python using R and reticulate\", R'tichoke](https://rtichoke.netlify.app/post/getting_started_with_reticulate/)]{.aside}\n\n## 미니콘다 설치\n\nR/쿼토 환경에서 파이썬을 사용하는 가장 간단한 방법은 미니콘다를 사용하는 방식이다.\n[미니콘다(miniconda)](https://docs.conda.io/en/latest/miniconda.html)는 작고 가볍기 때문에 아나콘다를 기본 기능을 사용할 수 있는 장점도 있다. 추후 필요한 기능에 필요한 패키지를 설치하여 사용한다.\n\nR에서 이를 가능하게 하는 방식이 `reticulate` 패키지를 설치한 후 전체 과정을 단순화시킬 수 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"reticulate\")\nlibrary(reticulate)\ninstall_miniconda(path = \"c:/miniconda\", update = TRUE)\n```\n:::\n\n\n## 가상환경\n\n미니콘다가 다른 이슈없이 설치되었다면 `conda_list()` 함수를 사용해서 `r-reticulate``\n\n- `use_python()`: 파이썬이 설치된 경로.\n- `use_virtualenv()`: 파이썬 가상환경(virtualenv)이 설치된 경로.\n- `use_condaenv()`: 콘다 환경이 설치된 경로.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconda_list(conda = \"c:/miniconda/_conda.exe\")\n```\n:::\n\n\n````\n            name                                                           python\n1   r-reticulate                     C:\\\\miniconda\\\\envs\\\\r-reticulate/python.exe\n6      miniconda                                         C:\\\\miniconda/python.exe\n````\n\n콘다환경에서 가상환경을 구축한다. 가상환경의 명칭을 `pyenv`로 특정한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_condaenv(condaenv = \"r-reticulate\", conda = \"c:/miniconda/_conda.exe\")\n\nconda_create(envname = \"pyenv\", conda = \"c:/miniconda/_conda.exe\")\n```\n:::\n\n\n\n## 패키지 설치\n\n`reticulate` 패키지에 포함된 `py_install()` 함수로 기계학습과 데이터 과학에 필요한 패키지를 설치한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreticulate::py_install(packages = c(\"pandas\", \"scikit-learn\", \"matplotlib\"))\n```\n:::\n\n\n\n# 파이썬 헬로월드\n\n[코드 출처: [HELLO WORLD Program With SCIKIT LEARN](https://medium.com/@parthvadhadiya424/hello-world-program-with-scikit-learn-a869beb55deb)]{.aside}\n\n## 파이썬 환경구축\n\n콘다환경을 구축하여 파이썬 데이터 과학 프로그램을 실행시킬 수 있는 환경을 구축한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\nuse_condaenv(condaenv = \"r-reticulate\", conda = \"c:/miniconda/_conda.exe\")\n```\n:::\n\n\n## 시각화\n\n고양이와 개에 대한 피쳐(Feature)를 바탕으로 고양이와 개를 분류하는 분류기계학습 모형을 개발해보자. 먼저, 기계학습을 위한 훈련 시험 데이터를 준비하고 시각화를 한다.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ntraining_set = {'Dog':[[1,2],[2,3],[3,1]], 'Cat':[[11,20],[14,15],[12,15]]}\ntesting_set = [15,20]\n\n#ploting all data\nimport matplotlib.pyplot as plt\nc = 'x'\nfor data in training_set:\n\tprint(data)\n\t\n\t#print(training_set[data])\n\tfor i in training_set[data]:\n\t\tplt.plot(i[0], i[1], c, color='c')\n\t\n\tc = 'o'\nplt.show()\n```\n\n::: {.cell-output-display}\n![](03_setup_python_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n## 분류모형\n\n다양한 기계학습모형이 존재하지만 먼저 KNN 분류모형을 적합시켜 고양이와 개 분류 기계학습모형을 개발한다.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# 기계학습모형 데이터셋 준비\nx = []\ny = []\nfor group in training_set:\n\t\n\tfor features in training_set[group]:\n\t\tx.append(features)\n\t\ty.append(group)\n\n# 기계학습모형 특정\nfrom sklearn import preprocessing, neighbors\n\n# 데이터에 모형 적합\nclf = neighbors.KNeighborsClassifier()\nclf.fit(x, y)\n```\n\n::: {.cell-output-display}\n```{=html}\n<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier()</pre></div></div></div></div></div>\n```\n:::\n:::\n\n\n## 분류모형 성능\n\n데이터에 적합시킨 모형이 얼마나 고양이와 개를 잘 분류하는지 예측 정확도를 따져보자.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# 예측모형 성능 평가\nfrom sklearn.metrics import accuracy_score\nimport pandas as pd\n\ndog_df = pd.DataFrame.from_dict(training_set['Dog'])\ndog_df['Y'] = \"Dog\"\n\ncat_df = pd.DataFrame.from_dict(training_set['Cat'])\ncat_df['Y'] = \"Cat\"\n\ntrainging_df = pd.concat([dog_df, cat_df])\n\nfeature_df = trainging_df.drop(['Y'], axis=1)\nlabel_df = trainging_df['Y']\n\nY_preds = clf.predict(feature_df)\n\nprint('모형 정확도   : {:.3f}'.format(accuracy_score(label_df, Y_preds)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n모형 정확도   : 1.000\n```\n:::\n:::\n\n\n## 분류모형 예측\n\n실제로 기계학습모형에 사용된 적이 없는 개와 고양이 데이터를 직접 넣어 어떻게 예측하는지 확인해보자.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# 분류모형 예측\nimport numpy as np\ntesting_set = np.array(testing_set)\ntesting_set = testing_set.reshape(1,-1)\n\n# 예측\nprediction = clf.predict(testing_set)\nprint(prediction)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Cat']\n```\n:::\n:::\n",
    "supporting": [
      "03_setup_python_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}