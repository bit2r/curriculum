{
  "hash": "b396ab6889ce25727039d540a5adb7cf",
  "result": {
    "markdown": "---\ntitle: \"데이터프레임\"\ndescription: \"데이터과학 자료구조 데이터프레임(DataFrame)을 학습합니다.\"\ndate: today # 날짜 설정: now, last-modified\nauthor:\n  - name: 이광춘\n    affiliation: TCS\ntitle-block-banner: false\nformat:\n  html:\n    theme: \n      - flatly\n      - css/quarto-fonts.css\n    code-fold: false\n    code-overflow: scroll\n    toc: true\n    toc-depth: 3\n    number-sections: true\n    highlight-style: github    \n    self-contained: false\neditor_options: \n  chunk_output_type: console\nknitr:\n  opts_chunk: \n    collapse: true\n    comment: \"#>\" \n    R.options:\n      knitr.graphics.auto_pdf: true  \nfilters:\n   - lightbox\nlightbox: auto      \n---\n\n\n\n\n# 데이터프레임\n\n- 데이터 과학 자료구조 [데이터프레임](https://aispiration.com/data-science/ds-data-structure.html)\n\n![](fig/dataframe_pandas.jpg)\n\n# 내부 데이터\n\n## list of lists\n\n:::{layout-ncol=\"2\"}\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport numpy as np\n\n# list of lists 생성\ndata = [['Alex', 10], ['Bob', 12], ['Clarke', 13]]\n\n# 데이터프레임\ndf = pd.DataFrame(data, columns=['Name', 'Age'])\n\ndf\n```\n:::\n\n::: {.cell}\n\n```\n#>      Name  Age\n#> 0    Alex   10\n#> 1     Bob   12\n#> 2  Clarke   13\n```\n:::\n\n\n:::\n\n\n## dictionary of lists\n\n:::{layout-ncol=\"2\"}\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# dictionary of lists 생성\ndata = {'Name': ['Tom', 'Jack', 'Steve', 'Ricky'], 'Age': [28,34,29,42]}\n\n# Create a DataFrame\ndf = pd.DataFrame(data)\n\ndf\n```\n:::\n\n::: {.cell}\n\n```\n#>     Name  Age\n#> 0    Tom   28\n#> 1   Jack   34\n#> 2  Steve   29\n#> 3  Ricky   42\n```\n:::\n\n\n:::\n\n\n## list of dictionaries\n\n:::{layout-ncol=\"2\"}\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# list of dictionaries 생성\ndata = [{'a': 1, 'b': 2}, {'a': 5, 'b': 10, 'c': 20}]\n\ndf = pd.DataFrame(data)\n\nprint(df)\n```\n:::\n\n::: {.cell}\n\n```\n#>    a   b     c\n#> 0  1   2   NaN\n#> 1  5  10  20.0\n```\n:::\n\n\n:::\n\n\n## list of dictionaries with data types\n\n:::{layout-ncol=\"2\"}\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# list of dictionary 생성\nbook = [{'id':1,'name':'python','price':56,'no_of_pages':34},\n        {'id':2,'name':'Node-js','price':45,'no_of_pages':54},\n        {'id':3,'name':'R','price':100,'no_of_pages':80},\n        {'id':4,'name':'Html','price':16,'no_of_pages':20}]\n\n# 컬럼에 대한 자료형 지정\n\ndtypes = {'id': int, 'name': str, 'price': float, 'no_of_pages': int}\n\n# df = pd.DataFrame(book, dtype = {'id': int, 'name': str, 'price': float, 'no_of_pages': int})\n# df = pd.DataFrame(book, dtype = [('id', int), ('name', str), ('price', float), ('no_of_pages', int)])\ndf = pd.DataFrame.from_dict(book, orient='columns').astype(dtypes)\n\nprint(df)\n```\n:::\n\n::: {.cell}\n\n```\n#>    id     name  price  no_of_pages\n#> 0   1   python   56.0           34\n#> 1   2  Node-js   45.0           54\n#> 2   3        R  100.0           80\n#> 3   4     Html   16.0           20\n```\n:::\n\n\n:::\n\n## NumPy array\n\n:::{layout-ncol=\"2\"}\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Numpy Arrary 생성\ndata = np.array([[1, 2], [3, 4]])\n\ndf = pd.DataFrame(data, columns=['a', 'b'])\n\nprint(df)\n```\n:::\n\n::: {.cell}\n\n```\n#>    a  b\n#> 0  1  2\n#> 1  3  4\n```\n:::\n\n\n:::\n\n\n## NumPy structured array\n\n:::{layout-ncol=\"2\"}\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# NumPy structured array 생성\ndata = np.array([(1, 'Alice', 22), (2, 'Bob', 35)], dtype=[('ID', 'i4'), ('Name', 'U10'), ('Age', 'i4')])\n\ndf = pd.DataFrame(data)\n\nprint(df)\n```\n:::\n\n::: {.cell}\n\n```\n#>    ID   Name  Age\n#> 0   1  Alice   22\n#> 1   2    Bob   35\n```\n:::\n\n\n:::\n\n## Pandas Series\n\n:::{layout-ncol=\"2\"}\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Pandas Series 생성\nps = pd.Series([1, 3, 5, np.nan, 6, 8])\n\ndf = pd.DataFrame(ps, columns=['Number'])\n\nprint(df)\n```\n:::\n\n::: {.cell}\n\n```\n#>    Number\n#> 0     1.0\n#> 1     3.0\n#> 2     5.0\n#> 3     NaN\n#> 4     6.0\n#> 5     8.0\n```\n:::\n\n\n:::\n\n## dictionary of Series\n\n:::{layout-ncol=\"2\"}\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Pandas Series 생성\ns1 = pd.Series([1, 3, 5, np.nan, 6, 8])\ns2 = pd.Series([4, 7, 5, 2, 3, 6])\n\n# dictionary of Series 생성\ndata = {'First': s1, 'Second': s2}\n\ndf = pd.DataFrame(data)\n\nprint(df)\n```\n:::\n\n::: {.cell}\n\n```\n#>    First  Second\n#> 0    1.0       4\n#> 1    3.0       7\n#> 2    5.0       5\n#> 3    NaN       2\n#> 4    6.0       3\n#> 5    8.0       6\n```\n:::\n\n\n:::\n\n## ~~pandas Panel~~\n\n`Panel has been deprecated in the 0.20.x release and completely removed from 0.25`\n\n:::{layout-ncol=\"2\"}\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# pandas Panel 생성\np = pd.Panel({'Item1': pd.DataFrame(np.random.randn(4, 3)), \n              'Item2': pd.DataFrame(np.random.randn(4, 2))})\n\ndf = pd.DataFrame(p)\n\nprint(df)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# pandas Panel 생성\ndata = {'Item1': pd.DataFrame(np.random.randn(4, 3)), \n        'Item2': pd.DataFrame(np.random.randn(4, 2))}\n\ndf = pd.Panel(data)\n\n\nprint(df)\n```\n:::\n\n\n:::\n\n## list of tuples\n\n:::{layout-ncol=\"2\"}\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# list of tuple 생성\ndata = [('Alex', 10), ('Bob', 12), ('Clarke', 13)]\n\ndf = pd.DataFrame(data, columns=['Name', 'Age'])\n\nprint(df)\n```\n:::\n\n::: {.cell}\n\n```\n#>      Name  Age\n#> 0    Alex   10\n#> 1     Bob   12\n#> 2  Clarke   13\n```\n:::\n\n\n:::\n\n\n\n\n\n# 외부 데이터\n\n## `.csv` 파일\n\n:::{layout-ncol=\"2\"}\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport numpy as np\n\ndf = pd.read_csv('https://raw.githubusercontent.com/datasets/population/master/data/population.csv')\nprint(df)\n```\n:::\n\n::: {.cell}\n\n```\n#>       Country Name Country Code  Year      Value\n#> 0       Arab World          ARB  1960   92197753\n#> 1       Arab World          ARB  1961   94724510\n#> 2       Arab World          ARB  1962   97334442\n#> 3       Arab World          ARB  1963  100034179\n#> 4       Arab World          ARB  1964  102832760\n#> ...            ...          ...   ...        ...\n#> 15404     Zimbabwe          ZWE  2014   13586681\n#> 15405     Zimbabwe          ZWE  2015   13814629\n#> 15406     Zimbabwe          ZWE  2016   14030390\n#> 15407     Zimbabwe          ZWE  2017   14236745\n#> 15408     Zimbabwe          ZWE  2018   14439018\n#> \n#> [15409 rows x 4 columns]\n```\n:::\n\n\n:::\n\n\n## `.json` 파일\n\n:::{layout-ncol=\"2\"}\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndf = pd.read_json('https://raw.githubusercontent.com/sparkbyexamples/python-pandas-examples/main/data-files/courses_data.json')\nprint(df)\n```\n:::\n\n::: {.cell}\n\n```\n#>   Courses    Fee Duration\n#> 0   Spark  25000  50 Days\n#> 1  Pandas  20000  35 Days\n#> 2    Java  15000\n```\n:::\n\n\n:::\n\n## `.xlsx` 파일\n\n[openpyxl 설치: `pip3 install openpyxl`]{.aside}\n\n:::{layout-ncol=\"2\"}\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom pandas import ExcelFile\n\ndf = pd.read_excel('https://github.com/buchs-kevin/Pandas-Excel-Example/raw/master/Pandas-Example.xlsx')\nprint(df)\n```\n:::\n\n::: {.cell}\n\n```\n#>       Patient   BP    SO2  DrFirst  DrLast  BP*SO2\n#> 0   Joe Smith  123  1.234    James  Rogers     NaN\n#> 1  Frank Blue   99  1.100  William    Kahn     NaN\n```\n:::\n\n\n:::\n\n\n## `SQLite` DB 파일\n\n\n:::{layout-ncol=\"2\"}\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport sqlite3\n\nconn = sqlite3.connect('data/portal_mammals.sqlite')\ndf = pd.read_sql_query('SELECT * FROM species;', conn)\nprint(df)\n```\n:::\n\n::: {.cell}\n\n```\n#>    species_id             genus          species     taxa\n#> 0          AB        Amphispiza        bilineata     Bird\n#> 1          AH  Ammospermophilus          harrisi   Rodent\n#> 2          AS        Ammodramus       savannarum     Bird\n#> 3          BA           Baiomys          taylori   Rodent\n#> 4          CB   Campylorhynchus  brunneicapillus     Bird\n#> 5          CM       Calamospiza      melanocorys     Bird\n#> 6          CQ        Callipepla         squamata     Bird\n#> 7          CS          Crotalus       scutalatus  Reptile\n#> 8          CT     Cnemidophorus           tigris  Reptile\n#> 9          CU     Cnemidophorus        uniparens  Reptile\n#> 10         CV          Crotalus          viridis  Reptile\n#> 11         DM         Dipodomys         merriami   Rodent\n#> 12         DO         Dipodomys            ordii   Rodent\n#> 13         DS         Dipodomys      spectabilis   Rodent\n#> 14         DX         Dipodomys              sp.   Rodent\n#> 15         EO           Eumeces        obsoletus  Reptile\n#> 16         GS          Gambelia            silus  Reptile\n#> 17         NL           Neotoma         albigula   Rodent\n#> 18         NX           Neotoma              sp.   Rodent\n#> 19         OL         Onychomys      leucogaster   Rodent\n#> 20         OT         Onychomys         torridus   Rodent\n#> 21         OX         Onychomys              sp.   Rodent\n#> 22         PB       Chaetodipus          baileyi   Rodent\n#> 23         PC            Pipilo        chlorurus     Bird\n#> 24         PE        Peromyscus         eremicus   Rodent\n#> 25         PF       Perognathus           flavus   Rodent\n#> 26         PG         Pooecetes        gramineus     Bird\n#> 27         PH       Perognathus         hispidus   Rodent\n#> 28         PI       Chaetodipus      intermedius   Rodent\n#> 29         PL        Peromyscus         leucopus   Rodent\n#> 30         PM        Peromyscus      maniculatus   Rodent\n#> 31         PP       Chaetodipus     penicillatus   Rodent\n#> 32         PU            Pipilo           fuscus     Bird\n#> 33         PX       Chaetodipus              sp.   Rodent\n#> 34         RF   Reithrodontomys       fulvescens   Rodent\n#> 35         RM   Reithrodontomys        megalotis   Rodent\n#> 36         RO   Reithrodontomys         montanus   Rodent\n#> 37         RX   Reithrodontomys              sp.   Rodent\n#> 38         SA        Sylvilagus        audubonii   Rabbit\n#> 39         SB          Spizella          breweri     Bird\n#> 40         SC        Sceloporus           clarki  Reptile\n#> 41         SF          Sigmodon      fulviventer   Rodent\n#> 42         SH          Sigmodon         hispidus   Rodent\n#> 43         SO          Sigmodon     ochrognathus   Rodent\n#> 44         SS      Spermophilus        spilosoma   Rodent\n#> 45         ST      Spermophilus     tereticaudus   Rodent\n#> 46         SU        Sceloporus        undulatus  Reptile\n#> 47         SX          Sigmodon              sp.   Rodent\n#> 48         UL            Lizard              sp.  Reptile\n#> 49         UP            Pipilo              sp.     Bird\n#> 50         UR            Rodent              sp.   Rodent\n#> 51         US           Sparrow              sp.     Bird\n#> 52         ZL       Zonotrichia       leucophrys     Bird\n#> 53         ZM           Zenaida         macroura     Bird\n```\n:::\n\n\n:::\n\n\n## `html` 파일\n\n[lxml 설치 : `pip3 install lxml`]{.aside}\n\n[위키백과 Minnesota](https://en.wikipedia.org/wiki/Minnesota) 웹사이트에서 \"United States presidential election results for Minnesota\" 선거결과 표 가져온다.\n\n:::{layout-ncol=\"2\"}\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndf = pd.read_html('https://en.wikipedia.org/wiki/Minnesota', \n                  match='United States presidential election results for Minnesota')[0]\nprint(df)\n```\n:::\n\n::: {.cell}\n\n```\n#>     Year Republican         Democratic         Third party        \n#>     Year        No.       %        No.       %         No.       %\n#> 0   2020    1484065  45.28%    1717077  52.40%       76029   2.32%\n#> 1   2016    1323232  44.93%    1367825  46.44%      254176   8.63%\n#> 2   2012    1320225  44.96%    1546167  52.65%       70169   2.39%\n#> 3   2008    1275409  43.82%    1573354  54.06%       61606   2.12%\n#> 4   2004    1346695  47.61%    1445014  51.09%       36678   1.30%\n#> 5   2000    1109659  45.50%    1168266  47.91%      160760   6.59%\n#> 6   1996     766476  34.96%    1120438  51.10%      305726  13.94%\n#> 7   1992     747841  31.85%    1020997  43.48%      579110  24.66%\n#> 8   1988     962337  45.90%    1109471  52.91%       24982   1.19%\n#> 9   1984    1032603  49.54%    1036364  49.72%       15482   0.74%\n#> 10  1980     873241  42.56%     954174  46.50%      224538  10.94%\n#> 11  1976     819395  42.02%    1070440  54.90%       60096   3.08%\n#> 12  1972     898269  51.58%     802346  46.07%       41037   2.36%\n#> 13  1968     658643  41.46%     857738  54.00%       72129   4.54%\n#> 14  1964     559624  36.00%     991117  63.76%        3721   0.24%\n#> 15  1960     757915  49.16%     779933  50.58%        4039   0.26%\n#> 16  1956     719302  53.68%     617525  46.08%        3178   0.24%\n#> 17  1952     763211  55.33%     608458  44.11%        7814   0.57%\n#> 18  1948     483617  39.89%     692966  57.16%       35643   2.94%\n#> 19  1944     527416  46.86%     589864  52.41%        8249   0.73%\n#> 20  1940     596274  47.66%     644196  51.49%       10718   0.86%\n#> 21  1936     350461  31.01%     698811  61.84%       80703   7.14%\n#> 22  1932     363959  36.29%     600806  59.91%       38078   3.80%\n#> 23  1928     560977  57.77%     396451  40.83%       13548   1.40%\n#> 24  1924     420759  51.18%      55913   6.80%      345474  42.02%\n#> 25  1920     519421  70.59%     142994  19.43%       73423   9.98%\n#> 26  1916     179544  46.35%     179152  46.25%       28668   7.40%\n#> 27  1912      64334  19.25%     106426  31.84%      163459  48.91%\n#> 28  1908     195843  59.11%     109401  33.02%       26060   7.87%\n#> 29  1904     216651  73.98%      55187  18.84%       21022   7.18%\n#> 30  1900     190461  60.21%     112901  35.69%       12949   4.09%\n#> 31  1896     193503  56.62%     139735  40.89%        8524   2.49%\n#> 32  1892     122823  45.96%     100920  37.76%       43495  16.28%\n#> 33  1888     142492  54.12%     104385  39.65%       16408   6.23%\n#> 34  1884     111685  58.78%      70065  36.87%        8267   4.35%\n#> 35  1880      93902  62.28%      53315  35.36%        3553   2.36%\n#> 36  1876      72955  58.80%      48587  39.16%        2533   2.04%\n#> 37  1872      55708  61.27%      35211  38.73%           0   0.00%\n#> 38  1868      43722  60.88%      28096  39.12%           0   0.00%\n#> 39  1864      25055  59.06%      17367  40.94%           0   0.00%\n#> 40  1860      22069  63.53%      11920  34.31%         748   2.15%\n```\n:::\n\n\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}