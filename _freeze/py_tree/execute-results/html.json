{
  "hash": "c918c3978b939ac70faf81fbb5457d91",
  "result": {
    "markdown": "---\ntitle: \"기계학습\"\ndescription: \"나무모형 (Tree-Based Model)\"\ndate: today # 날짜 설정: now, last-modified\nauthor:\n  - name: 이광춘\n    affiliation: TCS\ntitle-block-banner: false\nformat:\n  html:\n    theme: \n      - flatly\n      - css/quarto-fonts.css\n    code-fold: false\n    toc: true\n    toc-depth: 2\n    number-sections: true\n    highlight-style: github    \n    self-contained: false\neditor_options: \n  chunk_output_type: console\n---\n\n\n# 문제정의\n\n[캐글: [Breast Cancer Wisconsin (Diagnostic) Data Set](https://www.kaggle.com/datasets/uciml/breast-cancer-wisconsin-data)]{.aside}\n\n여성 가슴에서 미세한 바늘 흡인(FNA)로 추출한 덩어리를 디지털화된 이미지로부터 추출한 정보를 바탕으로 \n유방암 여부를 예측한다.\n\n범주 구분: 357 정상(benign), 212 유방암(malignant)\n\n# 데이터셋\n\n## 유방암 (분류)\n\n여성 가슴에서 미세한 바늘 흡인(FNA)로 추출한 덩어리를 디지털화된 이미지로부터 역산하여 계산한 피쳐를 담고 있고, 각 변수는 존재하는 세포핵의 특성을 나타낸다.\n\n- 변수 설명\n  - 1) ID number\n  - 2) Diagnosis (M = malignant, B = benign)\n- Ten real-valued features are computed for each cell nucleus:\n  - a) radius (mean of distances from center to points on the perimeter)\n  - b) texture (standard deviation of gray-scale values)\n  - c) perimeter\n  - d) area\n  - e) smoothness (local variation in radius lengths)\n  - f) compactness (perimeter^2 / area - 1.0)\n  - g) concavity (severity of concave portions of the contour)\n  - h) concave points (number of concave portions of the contour)\n  - i) symmetry\n  - j) fractal dimension (\"coastline approximation\" - 1)\n\n- field 3 is Mean Radius, field 13 is Radius SE, field 23 is Worst Radius.\n\n\n::: {.cell .column-screen-inset-shaded}\n::: {.cell-output-display}\nTable: Data summary\n\n|                         |           |\n|:------------------------|:----------|\n|Name                     |Piped data |\n|Number of rows           |568        |\n|Number of columns        |33         |\n|_______________________  |           |\n|Column type frequency:   |           |\n|character                |1          |\n|logical                  |1          |\n|numeric                  |31         |\n|________________________ |           |\n|Group variables          |None       |\n\n\n**Variable type: character**\n\n|skim_variable | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:-------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|diagnosis     |         0|             1|   1|   1|     0|        2|          0|\n\n\n**Variable type: logical**\n\n|skim_variable | n_missing| complete_rate| mean|count |\n|:-------------|---------:|-------------:|----:|:-----|\n|...33         |       568|             0|  NaN|:     |\n\n\n**Variable type: numeric**\n\n|skim_variable           | n_missing| complete_rate|        mean|           sd|      p0|       p25|       p50|        p75|         p100|hist  |\n|:-----------------------|---------:|-------------:|-----------:|------------:|-------:|---------:|---------:|----------:|------------:|:-----|\n|id                      |         0|             1| 30425139.67| 125124311.81| 8670.00| 869222.50| 906157.00| 8825022.25| 911320502.00|▇▁▁▁▁ |\n|radius_mean             |         0|             1|       14.14|         3.52|    6.98|     11.71|     13.38|      15.80|        28.11|▂▇▃▁▁ |\n|texture_mean            |         0|             1|       19.28|         4.30|    9.71|     16.17|     18.84|      21.78|        39.28|▃▇▃▁▁ |\n|perimeter_mean          |         0|             1|       92.05|        24.25|   43.79|     75.20|     86.29|     104.15|       188.50|▃▇▃▁▁ |\n|area_mean               |         0|             1|      655.72|       351.66|  143.50|    420.30|    551.40|     784.15|      2501.00|▇▃▂▁▁ |\n|smoothness_mean         |         0|             1|        0.10|         0.01|    0.06|      0.09|      0.10|       0.11|         0.16|▂▇▅▁▁ |\n|compactness_mean        |         0|             1|        0.10|         0.05|    0.02|      0.07|      0.09|       0.13|         0.35|▇▇▂▁▁ |\n|concavity_mean          |         0|             1|        0.09|         0.08|    0.00|      0.03|      0.06|       0.13|         0.43|▇▃▂▁▁ |\n|concave points_mean     |         0|             1|        0.05|         0.04|    0.00|      0.02|      0.03|       0.07|         0.20|▇▃▂▁▁ |\n|symmetry_mean           |         0|             1|        0.18|         0.03|    0.11|      0.16|      0.18|       0.20|         0.30|▁▇▅▁▁ |\n|fractal_dimension_mean  |         0|             1|        0.06|         0.01|    0.05|      0.06|      0.06|       0.07|         0.10|▆▇▂▁▁ |\n|radius_se               |         0|             1|        0.41|         0.28|    0.11|      0.23|      0.32|       0.48|         2.87|▇▁▁▁▁ |\n|texture_se              |         0|             1|        1.22|         0.55|    0.36|      0.83|      1.11|       1.47|         4.88|▇▅▁▁▁ |\n|perimeter_se            |         0|             1|        2.87|         2.02|    0.76|      1.61|      2.29|       3.36|        21.98|▇▁▁▁▁ |\n|area_se                 |         0|             1|       40.37|        45.52|    6.80|     17.85|     24.57|      45.24|       542.20|▇▁▁▁▁ |\n|smoothness_se           |         0|             1|        0.01|         0.00|    0.00|      0.01|      0.01|       0.01|         0.03|▇▃▁▁▁ |\n|compactness_se          |         0|             1|        0.03|         0.02|    0.00|      0.01|      0.02|       0.03|         0.14|▇▃▁▁▁ |\n|concavity_se            |         0|             1|        0.03|         0.03|    0.00|      0.02|      0.03|       0.04|         0.40|▇▁▁▁▁ |\n|concave points_se       |         0|             1|        0.01|         0.01|    0.00|      0.01|      0.01|       0.01|         0.05|▇▇▁▁▁ |\n|symmetry_se             |         0|             1|        0.02|         0.01|    0.01|      0.02|      0.02|       0.02|         0.08|▇▃▁▁▁ |\n|fractal_dimension_se    |         0|             1|        0.00|         0.00|    0.00|      0.00|      0.00|       0.00|         0.03|▇▁▁▁▁ |\n|radius_worst            |         0|             1|       16.28|         4.83|    7.93|     13.02|     14.97|      18.79|        36.04|▆▇▃▁▁ |\n|texture_worst           |         0|             1|       25.67|         6.15|   12.02|     21.08|     25.41|      29.68|        49.54|▃▇▆▁▁ |\n|perimeter_worst         |         0|             1|      107.35|        33.57|   50.41|     84.15|     97.66|     125.53|       251.20|▇▇▃▁▁ |\n|area_worst              |         0|             1|      881.66|       569.28|  185.20|    515.68|    686.55|    1085.00|      4254.00|▇▂▁▁▁ |\n|smoothness_worst        |         0|             1|        0.13|         0.02|    0.07|      0.12|      0.13|       0.15|         0.22|▂▇▇▂▁ |\n|compactness_worst       |         0|             1|        0.25|         0.16|    0.03|      0.15|      0.21|       0.34|         1.06|▇▅▁▁▁ |\n|concavity_worst         |         0|             1|        0.27|         0.21|    0.00|      0.12|      0.23|       0.38|         1.25|▇▅▂▁▁ |\n|concave points_worst    |         0|             1|        0.11|         0.07|    0.00|      0.06|      0.10|       0.16|         0.29|▅▇▅▃▁ |\n|symmetry_worst          |         0|             1|        0.29|         0.06|    0.16|      0.25|      0.28|       0.32|         0.66|▅▇▁▁▁ |\n|fractal_dimension_worst |         0|             1|        0.08|         0.02|    0.06|      0.07|      0.08|       0.09|         0.21|▇▃▁▁▁ |\n:::\n:::\n\n\n## 연비 (예측)\n\n[데이터 출처: 캐글 [자동차 연비](https://www.kaggle.com/datasets/uciml/autompg-dataset)]{.aside}\n\n- 변수 설명\n    - mpg — Mileage/Miles Per Gallon\n    - cylinders — the power unit of the car where gasoline is turned into power\n    - displacement — engine displacement of the car\n    - horsepower — rate of the engine performance\n    - weight — the weight of a car\n    - acceleration — the acceleration of a car\n    - model — model of the car\n    - origin — the origin of the car\n    - car — the name of the car\n\n\n::: {.cell .column-screen-inset-shaded}\n::: {.cell-output-display}\nTable: Data summary\n\n|                         |           |\n|:------------------------|:----------|\n|Name                     |Piped data |\n|Number of rows           |398        |\n|Number of columns        |9          |\n|_______________________  |           |\n|Column type frequency:   |           |\n|character                |2          |\n|numeric                  |7          |\n|________________________ |           |\n|Group variables          |None       |\n\n\n**Variable type: character**\n\n|skim_variable | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:-------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|horsepower    |         0|             1|   1|   3|     0|       94|          0|\n|car name      |         0|             1|   6|  36|     0|      305|          0|\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|    mean|     sd|   p0|     p25|    p50|     p75|   p100|hist  |\n|:-------------|---------:|-------------:|-------:|------:|----:|-------:|------:|-------:|------:|:-----|\n|mpg           |         0|             1|   23.51|   7.82|    9|   17.50|   23.0|   29.00|   46.6|▆▇▆▃▁ |\n|cylinders     |         0|             1|    5.45|   1.70|    3|    4.00|    4.0|    8.00|    8.0|▇▁▃▁▃ |\n|displacement  |         0|             1|  193.43| 104.27|   68|  104.25|  148.5|  262.00|  455.0|▇▂▂▃▁ |\n|weight        |         0|             1| 2970.42| 846.84| 1613| 2223.75| 2803.5| 3608.00| 5140.0|▇▇▅▅▂ |\n|acceleration  |         0|             1|   15.57|   2.76|    8|   13.83|   15.5|   17.17|   24.8|▁▆▇▃▁ |\n|model year    |         0|             1|   76.01|   3.70|   70|   73.00|   76.0|   79.00|   82.0|▇▆▇▆▇ |\n|origin        |         0|             1|    1.57|   0.80|    1|    1.00|    1.0|    2.00|    3.0|▇▁▂▁▂ |\n:::\n:::\n\n\n# 예측모형 (Jupyter Notebook)\n\n- 분류모형\n    - [Decision Tree](code/python_ml/cancer_01_dt.ipynb)\n    - [Cross Validation](code/python_ml/cancer_02_cv.ipynb)\n    - [Ensemble - Voting](code/python_ml/cancer_03_ensemble_voting.ipynb)\n    - [Ensemble - Bagging](code/python_ml/cancer_03_ensemble_bagging.ipynb)\n    - [Ensemble - Random Forest](code/python_ml/cancer_03_ensemble_rf.ipynb)\n        - [Ensemble - Random Forest Classifier](code/python_ml/cancer_03_ensemble_rf_classifier.ipynb)    \n    - [Ensemble - Stochastic Gradient Boosting](code/python_ml/cancer_03_ensemble_boosting.ipynb)\n    - [Hyper Parameter Tuning](code/python_ml/cancer_04_tuning.ipynb)\n    - [Hyper Parameter Tuning - Random Forest](code/python_ml/cancer_04_tuning-rf.ipynb)\n- 회귀모형\n    - [Decision Tree](code/python_ml/auto_mpg_01_dt.ipynb)\n    - [Cross Validation](code/python_ml/auto_mpg_02_cv.ipynb)\n    - [Ensemble - Voting](code/python_ml/auto_mpg_03_ensemble_voting.ipynb)\n    - [Ensemble - Bagging](code/python_ml/auto_mpg_03_ensemble_bagging.ipynb)\n    - [Ensemble - Random Forest](code/python_ml/auto_mpg_03_ensemble_rf.ipynb)\n    - [Ensemble - Stochastic Gradient Boosting](code/python_ml/auto_mpg_03_ensemble_boosting.ipynb)\n    - [Hyper Parameter Tuning](code/python_ml/auto_mpg_04_tuning.ipynb)\n    - [Hyper Parameter Tuning - Random Forest](code/python_ml/auto_mpg_04_tuning-rf.ipynb)\n    \n    \n    \n    \n\n# 실습 데이터셋\n\n- [데이터셋](code/python_ml/dataset.ipynb)\n\n## recommend three tabular machine learning dataset for classification problem\n\n\n::: {.callout-caution collapse=\"true\"}\nSure, here are three tabular machine learning datasets for classification problems:\n\n- Titanic: The Titanic dataset is a well-known dataset that contains information on the passengers of the Titanic. The task is to predict whether a passenger survived or not based on features such as their age, gender, and passenger class.\n- Credit Card Fraud Detection: This dataset contains credit card transaction data, and the task is to classify transactions as fraudulent or genuine. The dataset contains a large number of features, including the amount of the transaction, time of the transaction, and information about the card used.\n- Adult Census Income: This dataset contains information on the income of individuals based on features such as their age, education, and occupation. The task is to predict whether an individual has an income greater than or equal to $50,000 per year.\n\nI hope these datasets are helpful! Let me know if you have any other questions.\n:::\n\n\n## where can i download credit card fraud deteciton dataset and adult census income dateset?\n\n::: {.callout-caution collapse=\"true\"}\n\nThe Titanic dataset is also available on Kaggle at the following link: <https://www.kaggle.com/c/titanic>\n\nThe Credit Card Fraud Detection dataset is available on Kaggle at the following link: <https://www.kaggle.com/mlg-ulb/creditcardfraud>\n\nThe Adult Census Income dataset is available on the UCI Machine Learning Repository at the following link: <https://archive.ics.uci.edu/ml/datasets/Adult>\n\nThese sites are well-known repositories for machine learning datasets and are a good resource for finding datasets for a variety of tasks.\n\nI hope this helps! Let me know if you have any other questions.\n:::\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}